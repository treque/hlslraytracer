// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "UnityCG.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
static const float INF = 999999999999.f;

// noise
float _Timei;

// AA jitter
//float2 _PixelOffset;

int _RayBounces;

// lights
float4 _DirectionalLight;


struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

// place where cpu stores all spheres
StructuredBuffer<Sphere> _Spheres;

struct Ray
{
    float3 o;
    float3 d;
    float3 e;
};

struct RayHit
{
    float3 pos;
    float distance;
    float3 n;
    float3 albedo;
    float3 specular;
};

Ray ConstructRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.o = origin;
    ray.d = direction;
    ray.e = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

RayHit ConstructRayHit()
{
    RayHit hit;
    hit.pos = float3(0.0f, 0.0f, 0.0f);
    hit.distance = INF;
    hit.n = float3(0.0f, 0.0f, 0.0f);
    return hit;
};

// float4 sphere - x,y,z center, w radius
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 d = ray.o - sphere.position;
    float p1 = -dot(ray.d, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.pos = ray.o + t * ray.d;
        bestHit.n = normalize(bestHit.pos - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}


// for an infinite plane at y=0
void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // distance along ray where plane is intersected
    float t = -ray.o.y / ray.d.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.pos = ray.o + t * ray.d;
        bestHit.n = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = 0.8f;
        bestHit.specular = 0.3f;
    }
}

Ray ConstructCameraRay(float2 uv)
{
    // transform camera origin to world space
    float3 o = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // u,v pixel from clip space to camera view space
    float3 d = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // get those uvs in world space
    d = mul(_CameraToWorld, float4(d, 0.0f)).xyz;
    d = normalize(d);

    return ConstructRay(o, d);
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = ConstructRayHit();
    // creating a default plane y = 0
    IntersectGroundPlane(ray, bestHit);
    
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (int i = 0; i < numSpheres; ++i) IntersectSphere(ray, bestHit, _Spheres[i]);

    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < INF)
    {
        ray.o = hit.pos + hit.n * 0.001f; // floating point precision error, adding an offset along the normal
        ray.d = reflect(ray.d, hit.n);
        ray.e *= hit.specular;
        
        //shadow ray
        Ray shadowRay = ConstructRay(hit.pos + hit.n * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != INF) return float3(0.0f, 0.0f, 0.0f);

        return saturate(dot(hit.n, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
    }
    else
    {
        ray.e = 0.0f;
        float theta = acos(ray.d.y) / -PI;
        float phi = atan2(ray.d.x, -ray.d.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.0f;
    }
}

///////// inigo quilez
float2 hash(float2 p) // replace this by something better
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

float3 random3(float3 c) {
    float j = 4096.0 * sin(dot(c, float3(17.0, 59.4, 15.0)));
    float3 r;
    r.z = frac(512.0 * j);
    j *= .125;
    r.x = frac(512.0 * j);
    j *= .125;
    r.y = frac(512.0 * j);
    return r - 0.5;
}

float simplex3d(in float3 p)
{
    const float F3 = 0.3333333;
    const float G3 = 0.1666667;
    float3 s = floor(p + dot(p, float3(F3, F3, F3)));
    float3 x = p - s + dot(s, float3(G3, G3, G3));

    /* calculate i1 and i2 */
    float3 e = step(float3(0.0, 0.0, 0.0), x - x.yzx);
    float3 i1 = e * (1.0 - e.zxy);
    float3 i2 = 1.0 - e.zxy * (1.0 - e);

    /* x1, x2, x3 */
    float3 x1 = x - i1 + G3;
    float3 x2 = x - i2 + 2.0 * G3;
    float3 x3 = x - 1.0 + 3.0 * G3;

    /* 2. find four surflets and store them in d */
    float4 w, d;

    /* calculate surflet weights */
    w.x = dot(x, x);
    w.y = dot(x1, x1);
    w.z = dot(x2, x2);
    w.w = dot(x3, x3);

    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
    w = max(0.6 - w, 0.0);

    /* calculate surflet components */
    d.x = dot(random3(s), x);
    d.y = dot(random3(s + i1), x1);
    d.z = dot(random3(s + i2), x2);
    d.w = dot(random3(s + 1.0), x3);

    /* multiply d by w^4 */
    w *= w;
    w *= w;
    d *= w;

    /* 3. return the sum of the four surflets */
    return dot(d, float4(52.0, 52.0, 52.0, 52.0));
}

float simplex3d_fractal(float3 m) {
    const float3x3 rot1 = float3x3(-0.37, 0.36, 0.85, -0.14, -0.93, 0.34, 0.92, 0.01, 0.4);
    const float3x3 rot2 = float3x3(-0.55, -0.39, 0.74, 0.33, -0.91, -0.24, 0.77, 0.12, 0.63);
    const float3x3 rot3 = float3x3(-0.71, 0.52, -0.47, -0.08, -0.72, -0.68, -0.7, -0.45, 0.56);
    return   0.5333333 * simplex3d(mul(m, rot1))
        + 0.2666667 * simplex3d(2.0 * mul(m ,rot2))
        + 0.1333333 * simplex3d(4.0 * mul(m, rot3))
        + 0.0666667 * simplex3d(8.0 * m);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    // as defined here RayTracingShader.SetTexture(0, "Result", target);
    Result.GetDimensions(w, h);

    float2 p = id.xy / float2(w, h);
    float3 p3 = float3(p, _Time.x);

    // transform pixel to [-1,1] range
    float2 uv = float2(id.xy / float2(w, h) * 2.0f - 1.0f);

    /*Ray ray = ConstructCameraRay(uv);

    float3 result = float3(0, 0, 0);
    for (int i = 0; i < _RayBounces; ++i)
    {
        RayHit hit = Trace(ray);
        result += ray.e * Shade(ray, hit);
        if (!any(ray.e)) break;
    }*/

    float  value = simplex3d_fractal(p3 * 8.0 + 8.0);
    value = 0.5 + 0.5 * value;
 
    Result[id.xy] = float4(value, value, value, 1);
}
